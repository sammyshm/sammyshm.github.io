{"pages":[],"posts":[{"title":"Markdown基本语法","text":"MarkdownMarkdown是一种纯文本格式的标记语言。 一.标题12345# 我是一级标题## 我是二级标题### 我是三级标题...####### 我是六级标题 标注语法应在标记符与内容用空格隔开下面是效果： 我是一级标题我是二级标题我是三级标题我是六级标题 二.字体加粗**这是你要加粗的字体** 斜体*这是你要倾斜的字体* 删除线~~这是你要添加删除线的字体~~展示效果：我是加粗字体我是倾斜字体我是倾斜加粗字体我是带有删除线的字体 三.引用在你要引用的文字面前加一个”&gt;”可以重复添加就像下面这样： 1234&gt;就像下面这样&gt;&gt;就像下面这样&gt;&gt;&gt;就像下面这样&gt;&gt;&gt;&gt;就像下面这样 展示效果： 就像下面这样 就像下面这样 就像下面这样 就像下面这样 四.分割线使用三个或者以上的”-“或者”*”就像这样： 123---***----- 效果就像这样： 五.图片语法： 123![图片描述](图片地址 &quot;图片标题&quot;)图片描述就是在图片下面展示的内容。图片标题可以不添加。 示例：![我是alt](/images/test.png &quot;我是可有可无的标题&quot;)效果就像这样： 六.超链接语法： 12[超链接名](超链接地址 &quot;超链接title&quot;)title可选择性添加 示例： 1[Hammond的博客](https://sammyshm.github.io) 效果就像这样：Hammond的博客Markdown本身语法不支持链接在新的界面中打开具体根据平台支持如果想要在新的界面中打开，可以选择使用htlm语句例如： 1&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名字&lt;/a&gt; 效果就像这样：github 七.列表无序列表语法：无序列表使用”+””-“”*”的任何一种都可以 123- 列表内容* 列表内容+ 列表内容 效果就像这样： 我是无序列表 我也是 我还是 有序列表121. 第一个列表2. 第二个列表 注意:需要使用空格隔开效果就像这样： 我是一号 我是二号 我是三号 列表嵌套上一级和下一级之间敲三个空格即可 这是一个无序列表 这个呢？ 八.表格语法： 1234|表头|表头|表头||----|:--:|---:||内容|内容|内容||内容|内容|内容| 第二用来分割表头和内容。其实用一个”-“就可以了，这里为了对齐，使用了多个。内容默认居左，”-“两边加上”:”表示文字居中“-“右边加上”:”表示文字居右示例： 12345|姓名|身份|技能||----|:--:|---:||刘备|大哥|哭||关羽|二哥|打||张飞|三弟|骂| 效果就像下面这样： 姓名 身份 技能 刘备 大哥 哭 关羽 二哥 打 张飞 三弟 骂 注意：表格上面一行需要是空行 九.代码语法： 12345单行代码：将代码使用反引号&quot;`&quot;包裹起来反引号就是英文模式下tab键上面那一个多行代码：将代码块使用三个反引号包裹起来 注意：三个反引号需要单独占一行效果就像这样：单行代码：我是一行代码代码块： 123int main(){ return 0;} 以上","link":"/2019/06/14/Markdown基本语法/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/06/05/hello-world/"},{"title":"github上传代码","text":"###安装git命令 ##检查是否安装gitgit如果出现内容则表示存在git命令。注意：安装完成记得添加环境变量 ##配置账户信息git confnig --global user.name &quot;username&quot;–global 修饰全局用户。git config --list查看当前信息。 ##建立本地git仓库 #cd到你要提交的文件夹cd /文件夹 #然后输入命令git init会有输出。 #添加文件到缓存git add .这句是添加所有文件git add file.xx直接添加单个文件 #提交缓存文件Commit到git库git commit -m “这是注释”会有输出。 ##建立远程仓库并提交 #去github new一个仓库复制好仓库地址 #链接到远程仓库git remote add origin 地址这里可能会要求你输入账号密码密码输入是不会显示 #上传git pull origin master先pull一下git pull origin mastergit pull origin master完成上传！","link":"/2019/06/14/github上传代码/"},{"title":"hexo基本操作","text":"HEXO博客基本操作初始化1hexo init 类似于恢复出厂设置 新建博客1hexo n &quot;博客标题&quot; 发布1hexo p 生成1hexo g 启动本地服务1hexo s 部署到远程1hexo d 其他静态模式1hexo server -s 修改本地端口1hexo server -p xxxx 自定义IP1hexo -server -i xxx.xxx.x.x 清除缓存","link":"/2019/06/14/hexo基本操作/"},{"title":"常见的编码样式","text":"常见的编码样式本文参考知乎文章程序员必备：彻底弄懂常见的7种中文字符编码 一、什么是编码？众所周知，在计算机里，所有内容都是通过0和1表示，那么要怎样才能使汉字正确的显示出来呢？ 121.给所有的汉字一个专属的数字编号。2.把这个数字编号用0和1表示出来。 但是，在0和1的世界里怎么才能分割字与字呢？例如：我们把“中”这个汉字编为1号，即在二进制中表示为00000001我们再把“国”这个汉字编为5号，即二进制表示为00000101但是汉字数量十分庞大，靠一个字节只能表示256个汉字。假设我们把一个汉字编为133号，表示为00000001 00000101 问题是当计算机读到00000001 00000101时，他应该显示“中国”两个字还是显示第133号汉字呢？因此如何分隔字符也是编码的一部分。 这时候编码的重要性就显现出来了 二、几种中文编码的关系我们来看一张图 图中我们可以看出，ASCII被所有编码兼容，而最常见的UTF8与GBK之间除了ASCII部分之外没有交集，这也是平时业务中最常见的导致乱码场景，使用UTF8去读取GBK编码的文字，可能会看到各种乱码。而GB系列的几种编码，GB18030兼容GBK，GBK又兼容GB2312，下文细讲。 三、ASCII编码ASCII编码每个字母或符号占1字节，并且最高位是0，使得其编码的字符只有128个。但有些编码把最高位为1的另外128个值也编上，让它可以表示256个值，但这属于ASCII的拓展， 并非标准的ASCII。我们通常所说的标准ASCII只有前128个值！我们来看一下ASCII的编码表 四、GB2312、GBK和GB18030编码GB全称GuoBiao国标，GBK全称GuoBiaoKuozhan国标扩展。GB18030编码兼容GBK，GBK兼容GB2312，其实这三种编码有着非常深厚的渊源，我们放在一起进行比较。 （一）GB2312最早一版的中文编码，每个字占据2bytes。由于要和ASCII兼容，那这2bytes最高位不可以为0了（否则和ASCII会有冲突）。在GB2312中收录了6763个汉字以及682个特殊符号，已经囊括了生活中最常用的所有汉字。GB2312编码表有个值得注意的点，这个表中也有一些数字和字母，与ASCII里面的字母非常像。例如A3B2对应的是数字2（如下图），但是ASCII里面50（十进制）对应的也是数字2。他们的区别就是输入法中所说的“半角”和“全角”。全角的数字2占两个字节。 通常，我们在打字或编程中都使用半角，即ASCII来编写数字或英文字母。特别是编程中，如果写全角的数字或字母，编译器很有可能不认识…… （二）GBK由于GB2312只有6763个汉字，我汉语博大精深，只有6763个字怎么够？于是GBK中在保证不和GB2312、ASCII冲突（即兼容GB2312和ASCII）的前提下，也用每个字占据2bytes的方式又编码了许多汉字。经过GBK编码后，可以表示的汉字达到了20902个，另有984个汉语标点符号、部首等。值得注意的是这20902个汉字还包含了繁体字，但是该繁体字与台湾Big5编码不兼容，因为同一个繁体字很可能在GBK和Big5中数字编码是不一样的。 （三）GB18030略 五、UTF8编码(Unicode Transformation Format)99%的前端写网页时都会加上，99%的后端工程师新建数据库表时都会加上DEFAULT CHARSET=utf8（剩下的1%应该是忘了写）。 之所以我们想让UTF8一统天下，就是因为UTF8可以表示出世界上所有的文字！UTF8与前面说的GB系列编码不兼容，所以如果一个文件中即有UTF8编码的文字，又有GB18030编码的文字，那绝对会有乱码。 Unicode赋予了全世界所有文字和符号一个独一无二的数字编号，UTF8所做的事情就是把这个数字编号表示出来（即解决前文提到的第2件事情）。UTF8解决字符间分隔的方式是数二进制中最高位连续1的个数来决定这个字是几字节编码。0开头的属于单字节，和ASCII码重合，做到了兼容。 字节数 二进制编码 单字节 0XXXXXXX 双字节 110XXXXX 10XXXXXX 三字节 1110XXXX 10XXXXXX 10XXXXXX 四字节 11110XXX 10XXXXXX 10XXXXXX 10XXXXXX 五字节 111110XX 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX 六字节 1111110X 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX 以三字节为例，开头第一个字节的”1110”，有连续三个1，说明包括本字节在内，接下来三个字节一起构成了一个文字。凡是不属于文字首字节的byte都以“10”开头，上表中标注X的位置才是真正用来表示Unicode数值的。 这种巧妙设计，把Unicode的数值和每个字的字节数融合在一起，最坏情况是6个字节表示一个字，已经足够表示世界上所有语言的所有文字了。不过从这种表示方式也可以很显然地看出来，UTF8和GBK没有任何关系，除了都兼容ASCII以外。 举例说明，中文“鹅”字，Unicode十进制值为40517（16进制为9E45，2进制为1001 1110 0100 0101）。这个2进制值长度为12位，查询上面表格发现，二字节不够表示，四字节太长，三字节刚好，因此可以表示为 11101001 10111001 10000101，换算为16进制即E9B985，这就是“鹅”字的UTF8编码，占3字节。另外，经查询，“鹅”的GBK编码为B6EC，和UTF8的值完全不相干。 对于中文汉字来说，所有常用汉字的Unicode值都可以用3字节的UTF8表示出来，而GBK编码的汉字基本是2字节（GB18030虽4字节但是日常没人会写那些字）。这也就导致了，如果把GBK编码的中文文本另存为UTF8编码，体积会大50%左右。这也是UTF8的一点小瑕疵，存储同样的汉字，体积比GBK要大50%。 六、其他（一）ANSI编码ANSI不是指具体的编码方式，它只是在Windows操作系统上的别称。在中文简体Windows操作系统上，ANSI就是GBK。而在其他语言环境下的ANSI则是其他的编码方式。 （二）Latin1编码（SIO-8559-1）相信99%的人第一次听到Latin1都是在使用Mysql数据库的时候接触到的。Latin1是Mysql数据库表的默认编码方式。Latin1也是单字节编码方式，也就是说最多只能表示256个字母或符号，并且前128个和ASCII完全吻合。","link":"/2021/10/25/常见的编码样式/"},{"title":"MySQL基础","text":"数据库操作一、 DDL(Data Definition Languages)数据定义语言。定义不同的数据段、数据库、表、列、索引等数据库对象。 增 create 删 drop 改 alter 二、 DML(Data Manipulation Languages)数据操纵语句。 增加数据 语法 insert into 表名(列1,…列N) values(值1,…值N); – 除整型外其他值都要用引号包裹 删除数据 修改数据update 表名 set 列 = 值 where 列 = 值; 三、 DQL(Data Query Languages)数据查询语言。 语法 1234567891011121314select 列表from 表名where 条件列表group by 分组字段having 分组之后的条件order by 排序limit 分页限定; 基础查询 多个字段的查询 select 字段名1,字段名2,… from 表名; 去除重复 distinct 计算列 一般可以使用四则运算计算一些列的值。 ifnull(表达式，替换值) 起别名 as(可以省略) 条件查询 运算符号 NULL值不能用 = 来比较,应该使用IS NULL; 不等号用 &lt;&gt;; 在里面用 in; 在…之间用 BETWEEN IN; 模糊查询 LIKE 占位符 _:表示一个字符%:表示多个字符 排序查询 语法:order by 子句 order by 排序字段1 排序方式1,排序字段2 排序方式2,… 排序方式: ASC:升序,默认方式 DESC:降序 聚合函数 将一列数据作为一个整体，进行纵向计算。 count:计算个数 max:求最大值 min:求最小值 sum:求数据和 avg:求平均值 注意聚合函数都会排除空值。 分组查询 语法:group by 分组字段; 注意:分组字段,聚合函数 where 和 having的区别？ 前者在分组之前判断，后者在分组后筛选 where后不能跟聚合函数 分页查询 语法:limit 开始的索引,每页的条数 公式:开始的索引 = （当前页码 - 1）*每页显示的条数 limit是MySQL的”方言” 四、 约束 概念：对表中的数据进行限定，保证数据的正确性、有效性和完整性 分类： 主键约束：primary key 注意： 含义：非空且唯一 一张表只能有一个字段为主键 主键时表中记录的唯一标识 在创建表时，添加主键 123create table 表名(id int primary key , name varchar(20)); 创建完成后再添加主键 ALTER TABLE 表名 MODIFY 字段名 PRIMARY KEY; 删除主键 ALTER TABLE 表名 DROP PRIMARY KEY; – 由于表中只有一个主键，故不必指定字段 自动增长(一般和主键一块使用) 概念：如果某一列是数值类型的，使用AUTO_INCREMENT; 删除自动增长： TABLE 表名 MODIFY 字段 int;```123456789101112131415162. 非空约束：not null * 添加： 1. 创建表时添加 2. 后面修改 * 删除： * 直接修改3. 唯一约束：unique * 添加 * 创建时添加约束 * 后期修改添加约束 * 注意：通过修改方式添加约束时，列里元素不能有重复。 * 删除 * alter table 表名 drop index 列名;4. 外键约束：foreign key **让表与表产生关系，从而保证数据的正确性** 1. 在创建表时，添加外键约束 语法：create table 表名( ... 外键列 constraint 外键名称 foreign key 外键列名称 references 主表名称(主表列名称) );1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253 2. 删除外键 ALTER TABLE 表名 DROP FOREIGN KRY 外键名称; 3. 创建之后添加外键 ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (字段) REFERENCES 主表名称(主表字段); 4. 级联操作 1. 设置级联 * 级联更新 ON UPDATE CASCADE * 级联删除 ON DELETE CASCADE 2. 添加级联 3. 删除级联---### 五、 多表查询1. 内连接查询 1. 隐式内连接 2. 2. 外连接查询3. 子查询 1. 子查询的结果是单行单列的 * 子查询可以作为条件,使用&gt; , &lt; , = ... 2. 子查询的结果是多行单列的 * 使用 in 3. 子查询的结果是多行多列的 * 子查询可以作为一张虚拟表来查询---## 数据库的设计1. 多表之间的关系 1. 一对一: * 实现：在任意一方添加唯一外键指向另一方主键 * 如：人和身份证号码 2. 一对多（多对一）： * 实现：在多的一方建立外键，指向一的主键。 * 如：部门和员工 * 一个部门有多个员工，一个员工只能对应一个部门 3. 多对多： * 实现：创建一个中间表，字段为其他表的主键，中间表指向其他表 * 如：学生和课程： * 一个学生可以选择多个课程，一个课程也可以被多个学生选择2. 数据库设计的范式 * 概念：设计数据库时，需要遵循的一些范式。 * 分类： 1. 第一范式（1NF）：每一列都是不可分割的原子数据项。 2. 第二范式（2NF）：在1NF基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码部分函数依赖）。 * 码：在一张表中，一个属性（属性组）被其他属性完全依赖，称这个属性（组）为该表的码。 3. 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其他非主属性（在2NF基础上消除传递依赖）。---## 数据库的备份和还原1. 命令行 * 备份： ```mysqldump -u用户名 -p密码 数据库名称 &gt; X:\\\\...\\\\xx.sql; 还原： 登录数据库 创建数据库 使用数据库 执行文件 文件路径```123456---## 事务1. 事务的基本介绍 * 如果一个包含多个步骤的业务操作，被事务管理，要么这些操作同事成功，要么同事失败。 1. 开启事务 ```start transaction 回滚 123. 提交```commit MySQL数据库中事务默认自动提交 一条DML语句会自动提交一次事务。 修改默认提交方式12select @@autocommit; -- 查询set @@autocommit = 0; -- 0手动提交,1自动提交 事务的四大特征 原子性：是不可分割的最小操作单位，要么同时 持久性： 当事务提交或回滚之后，数据会持久化的保存数据。 隔离性：多个事务之间，相互独立。 一致性：事务操作后，数据总量不变。 事务的隔离级别 概念：多个事务之间是隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。 存在问题： 脏读：一个事务，读取到另一个事务中没有提交的数据 不可重复读（虚读）：在同一个事务中，两次读取的数据不一样。 幻读：一个事务操作（DML）数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。 隔离级别： read uncommitted：读未提交 产生的问题：脏读、不可重复读、幻读 read committed：读已提交 产生的问题：不可重复读、幻读 repeatbale read：不可重复读 产生的问题：可重复读（MySQL默认） serializable：串行化 解决所有问题 注意：隔离级别从小到大安全性越来越高，但是效率越来越低 数据库隔离级别设置12select @@tx_isolation; -- 查询隔离级别set global transaction isolation level 级别字符串; -- 设置隔离级别 DCL: 管理用户 添加用户 user 'username'@'host' identified by 'password';```122. 删除用户```drop user &apos;username&apos;@&apos;host&apos;; 修改用户 USER SET PASSWORD 1```SET PASSWORD FOR &apos;username&apos;@&apos;host&apos; = PASSWORD(newpassword); 查询用户 切换到MySQL数据库 查询USER表 注意：’%’表示可以在任意主机上使用该用户登录。 忘记root的密码咋搞？ 停止运行mysqlstop mysql```12. 使用无验证方式启动mysql服务```mysql --skip--grant-tables 打开新的cmd窗口，直接输入mysql命令，就可以登录成功 修改root用户的密码 关闭两个窗口 打开任务管理器，手动结束mysqld.exe进程 启动mysql服务 使用新密码登录 权限管理 查询权限 grants for 'username'@'host';```122. 授予权限```grant 权限列表 on 数据库名.表名 to &apos;用户名&apos;@&apos;主机名&apos;; 撤销权限revoke 权限列表 on 数据库名.表名 from '用户名'@'主机名';","link":"/2021/11/15/MySQL基础/"}],"tags":[],"categories":[]}