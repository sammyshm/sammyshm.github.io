{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/06/05/hello-world/"},{"title":"常见的编码样式","text":"常见的编码样式本文参考知乎文章程序员必备：彻底弄懂常见的7种中文字符编码 一、什么是编码？众所周知，在计算机里，所有内容都是通过0和1表示，那么要怎样才能使汉字正确的显示出来呢？ 121.给所有的汉字一个专属的数字编号。2.把这个数字编号用0和1表示出来。 但是，在0和1的世界里怎么才能分割字与字呢？例如：我们把“中”这个汉字编为1号，即在二进制中表示为00000001我们再把“国”这个汉字编为5号，即二进制表示为00000101但是汉字数量十分庞大，靠一个字节只能表示256个汉字。假设我们把一个汉字编为133号，表示为00000001 00000101 问题是当计算机读到00000001 00000101时，他应该显示“中国”两个字还是显示第133号汉字呢？因此如何分隔字符也是编码的一部分。 这时候编码的重要性就显现出来了 二、几种中文编码的关系我们来看一张图 图中我们可以看出，ASCII被所有编码兼容，而最常见的UTF8与GBK之间除了ASCII部分之外没有交集，这也是平时业务中最常见的导致乱码场景，使用UTF8去读取GBK编码的文字，可能会看到各种乱码。而GB系列的几种编码，GB18030兼容GBK，GBK又兼容GB2312，下文细讲。 三、ASCII编码ASCII编码每个字母或符号占1字节，并且最高位是0，使得其编码的字符只有128个。但有些编码把最高位为1的另外128个值也编上，让它可以表示256个值，但这属于ASCII的拓展， 并非标准的ASCII。我们通常所说的标准ASCII只有前128个值！我们来看一下ASCII的编码表 四、GB2312、GBK和GB18030编码GB全称GuoBiao国标，GBK全称GuoBiaoKuozhan国标扩展。GB18030编码兼容GBK，GBK兼容GB2312，其实这三种编码有着非常深厚的渊源，我们放在一起进行比较。 （一）GB2312最早一版的中文编码，每个字占据2bytes。由于要和ASCII兼容，那这2bytes最高位不可以为0了（否则和ASCII会有冲突）。在GB2312中收录了6763个汉字以及682个特殊符号，已经囊括了生活中最常用的所有汉字。GB2312编码表有个值得注意的点，这个表中也有一些数字和字母，与ASCII里面的字母非常像。例如A3B2对应的是数字2（如下图），但是ASCII里面50（十进制）对应的也是数字2。他们的区别就是输入法中所说的“半角”和“全角”。全角的数字2占两个字节。 通常，我们在打字或编程中都使用半角，即ASCII来编写数字或英文字母。特别是编程中，如果写全角的数字或字母，编译器很有可能不认识…… （二）GBK由于GB2312只有6763个汉字，我汉语博大精深，只有6763个字怎么够？于是GBK中在保证不和GB2312、ASCII冲突（即兼容GB2312和ASCII）的前提下，也用每个字占据2bytes的方式又编码了许多汉字。经过GBK编码后，可以表示的汉字达到了20902个，另有984个汉语标点符号、部首等。值得注意的是这20902个汉字还包含了繁体字，但是该繁体字与台湾Big5编码不兼容，因为同一个繁体字很可能在GBK和Big5中数字编码是不一样的。 （三）GB18030略 五、UTF8编码(Unicode Transformation Format)99%的前端写网页时都会加上，99%的后端工程师新建数据库表时都会加上DEFAULT CHARSET=utf8（剩下的1%应该是忘了写）。 之所以我们想让UTF8一统天下，就是因为UTF8可以表示出世界上所有的文字！UTF8与前面说的GB系列编码不兼容，所以如果一个文件中即有UTF8编码的文字，又有GB18030编码的文字，那绝对会有乱码。 Unicode赋予了全世界所有文字和符号一个独一无二的数字编号，UTF8所做的事情就是把这个数字编号表示出来（即解决前文提到的第2件事情）。UTF8解决字符间分隔的方式是数二进制中最高位连续1的个数来决定这个字是几字节编码。 0开头的属于单字节，和ASCII码重合，做到了兼容。 字节数 二进制编码 单字节 0XXXXXXX 双字节 110XXXXX 10XXXXXX 三字节 1110XXXX 10XXXXXX 10XXXXXX 四字节 11110XXX 10XXXXXX 10XXXXXX 10XXXXXX 五字节 111110XX 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX 六字节 1111110X 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX — 以三字节为例，开头第一个字节的”1110”，有连续三个1，说明包括本字节在内，接下来三个字节一起构成了一个文字。凡是不属于文字首字节的byte都以“10”开头，上表中标注X的位置才是真正用来表示Unicode数值的。 这种巧妙设计，把Unicode的数值和每个字的字节数融合在一起，最坏情况是6个字节表示一个字，已经足够表示世界上所有语言的所有文字了。不过从这种表示方式也可以很显然地看出来，UTF8和GBK没有任何关系，除了都兼容ASCII以外。 举例说明，中文“鹅”字，Unicode十进制值为40517（16进制为9E45，2进制为1001 1110 0100 0101）。这个2进制值长度为12位，查询上面表格发现，二字节不够表示，四字节太长，三字节刚好，因此可以表示为 11101001 10111001 10000101，换算为16进制即E9B985，这就是“鹅”字的UTF8编码，占3字节。另外，经查询，“鹅”的GBK编码为B6EC，和UTF8的值完全不相干。 对于中文汉字来说，所有常用汉字的Unicode值都可以用3字节的UTF8表示出来，而GBK编码的汉字基本是2字节（GB18030虽4字节但是日常没人会写那些字）。这也就导致了，如果把GBK编码的中文文本另存为UTF8编码，体积会大50%左右。这也是UTF8的一点小瑕疵，存储同样的汉字，体积比GBK要大50%。 六、其他（一）ANSI编码ANSI不是指具体的编码方式，它只是在Windows操作系统上的别称。在中文简体Windows操作系统上，ANSI就是GBK。而在其他语言环境下的ANSI则是其他的编码方式。 （二）Latin1编码（SIO-8559-1）相信99%的人第一次听到Latin1都是在使用Mysql数据库的时候接触到的。Latin1是Mysql数据库表的默认编码方式。Latin1也是单字节编码方式，也就是说最多只能表示256个字母或符号，并且前128个和ASCII完全吻合。","link":"/2021/10/25/常见的编码样式/"},{"title":"github上传代码","text":"###安装git命令 ##检查是否安装gitgit如果出现内容则表示存在git命令。注意：安装完成记得添加环境变量 ##配置账户信息git confnig --global user.name &quot;username&quot;–global 修饰全局用户。git config --list查看当前信息。 ##建立本地git仓库 #cd到你要提交的文件夹cd /文件夹 #然后输入命令git init会有输出。 #添加文件到缓存git add .这句是添加所有文件git add file.xx直接添加单个文件 #提交缓存文件Commit到git库git commit -m “这是注释”会有输出。 ##建立远程仓库并提交 #去github new一个仓库复制好仓库地址 #链接到远程仓库git remote add origin 地址这里可能会要求你输入账号密码密码输入是不会显示 #上传git pull origin master先pull一下git pull origin mastergit pull origin master完成上传！","link":"/2019/06/14/github上传代码/"},{"title":"hexo基本操作","text":"HEXO博客基本操作初始化1hexo init 类似于恢复出厂设置 新建博客1hexo n &quot;博客标题&quot; 发布1hexo p 生成1hexo g 启动本地服务1hexo s 部署到远程1hexo d 其他静态模式1hexo server -s 修改本地端口1hexo server -p xxxx 自定义IP1hexo -server -i xxx.xxx.x.x 清除缓存","link":"/2019/06/14/hexo基本操作/"},{"title":"Markdown基本语法","text":"MarkdownMarkdown是一种纯文本格式的标记语言。 一.标题12345# 我是一级标题## 我是二级标题### 我是三级标题...####### 我是六级标题 标注语法应在标记符与内容用空格隔开下面是效果： 我是一级标题我是二级标题我是三级标题我是六级标题 二.字体加粗**这是你要加粗的字体** 斜体*这是你要倾斜的字体* 删除线~~这是你要添加删除线的字体~~展示效果：我是加粗字体我是倾斜字体我是倾斜加粗字体我是带有删除线的字体 三.引用在你要引用的文字面前加一个”&gt;”可以重复添加就像下面这样： 1234&gt;就像下面这样&gt;&gt;就像下面这样&gt;&gt;&gt;就像下面这样&gt;&gt;&gt;&gt;就像下面这样 展示效果： 就像下面这样 就像下面这样 就像下面这样 就像下面这样 四.分割线使用三个或者以上的”-“或者”*”就像这样： 123---***----- 效果就像这样： 五.图片语法： 123![图片描述](图片地址 &quot;图片标题&quot;)图片描述就是在图片下面展示的内容。图片标题可以不添加。 示例：![我是alt](/images/test.png &quot;我是可有可无的标题&quot;)效果就像这样： 六.超链接语法： 12[超链接名](超链接地址 &quot;超链接title&quot;)title可选择性添加 示例： 1[Hammond的博客](https://sammyshm.github.io) 效果就像这样：Hammond的博客Markdown本身语法不支持链接在新的界面中打开具体根据平台支持如果想要在新的界面中打开，可以选择使用htlm语句例如： 1&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名字&lt;/a&gt; 效果就像这样：github 七.列表无序列表语法：无序列表使用”+””-“”*”的任何一种都可以 123- 列表内容* 列表内容+ 列表内容 效果就像这样： 我是无序列表 我也是 我还是 有序列表121. 第一个列表2. 第二个列表 注意:需要使用空格隔开效果就像这样： 我是一号 我是二号 我是三号 列表嵌套上一级和下一级之间敲三个空格即可 这是一个无序列表 这个呢？ 八.表格语法： 1234|表头|表头|表头||----|:--:|---:||内容|内容|内容||内容|内容|内容| 第二用来分割表头和内容。其实用一个”-“就可以了，这里为了对齐，使用了多个。内容默认居左，”-“两边加上”:”表示文字居中“-“右边加上”:”表示文字居右示例： 12345|姓名|身份|技能||----|:--:|---:||刘备|大哥|哭||关羽|二哥|打||张飞|三弟|骂| 效果就像下面这样： 姓名 身份 技能 刘备 大哥 哭 关羽 二哥 打 张飞 三弟 骂 注意：表格上面一行需要是空行 九.代码语法： 12345单行代码：将代码使用反引号&quot;`&quot;包裹起来反引号就是英文模式下tab键上面那一个多行代码：将代码块使用三个反引号包裹起来 注意：三个反引号需要单独占一行效果就像这样：单行代码：我是一行代码代码块： 123int main(){ return 0;} 以上","link":"/2019/06/14/Markdown基本语法/"}],"tags":[],"categories":[]}